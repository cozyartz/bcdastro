/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Purchases {
  export type PurchaseStruct = {
    buyer: AddressLike;
    mediaId: string;
    pricePaid: BigNumberish;
    timestamp: BigNumberish;
  };

  export type PurchaseStructOutput = [
    buyer: string,
    mediaId: string,
    pricePaid: bigint,
    timestamp: bigint
  ] & { buyer: string; mediaId: string; pricePaid: bigint; timestamp: bigint };
}

export interface PurchasesInterface extends Interface {
  getFunction(
    nameOrSignature: "getPurchases" | "purchases" | "recordPurchase"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PurchaseRecorded"): EventFragment;

  encodeFunctionData(
    functionFragment: "getPurchases",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "purchases",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordPurchase",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchases", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordPurchase",
    data: BytesLike
  ): Result;
}

export namespace PurchaseRecordedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    mediaId: string,
    pricePaid: BigNumberish
  ];
  export type OutputTuple = [buyer: string, mediaId: string, pricePaid: bigint];
  export interface OutputObject {
    buyer: string;
    mediaId: string;
    pricePaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Purchases extends BaseContract {
  connect(runner?: ContractRunner | null): Purchases;
  waitForDeployment(): Promise<this>;

  interface: PurchasesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPurchases: TypedContractMethod<
    [mediaId: string],
    [Purchases.PurchaseStructOutput[]],
    "view"
  >;

  purchases: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        buyer: string;
        mediaId: string;
        pricePaid: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  recordPurchase: TypedContractMethod<
    [mediaId: string, pricePaid: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPurchases"
  ): TypedContractMethod<
    [mediaId: string],
    [Purchases.PurchaseStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchases"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        buyer: string;
        mediaId: string;
        pricePaid: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordPurchase"
  ): TypedContractMethod<
    [mediaId: string, pricePaid: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PurchaseRecorded"
  ): TypedContractEvent<
    PurchaseRecordedEvent.InputTuple,
    PurchaseRecordedEvent.OutputTuple,
    PurchaseRecordedEvent.OutputObject
  >;

  filters: {
    "PurchaseRecorded(address,string,uint256)": TypedContractEvent<
      PurchaseRecordedEvent.InputTuple,
      PurchaseRecordedEvent.OutputTuple,
      PurchaseRecordedEvent.OutputObject
    >;
    PurchaseRecorded: TypedContractEvent<
      PurchaseRecordedEvent.InputTuple,
      PurchaseRecordedEvent.OutputTuple,
      PurchaseRecordedEvent.OutputObject
    >;
  };
}
