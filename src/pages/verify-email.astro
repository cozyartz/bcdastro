---
import Layout from '../components/Layout.astro';
---

<Layout title="Email Verification - Battle Creek Drone">
  <div class="verification-container">
    <div class="verification-card glass">
      <div class="verification-header">
        <i class="fas fa-envelope-check"></i>
        <h1>Email Verification</h1>
      </div>
      
      <div id="verification-content">
        <div id="verifying-state" class="verification-state">
          <div class="spinner"></div>
          <p>Verifying your email address...</p>
        </div>
        
        <div id="success-state" class="verification-state hidden">
          <i class="fas fa-check-circle success-icon"></i>
          <h2>Email Verified Successfully!</h2>
          <p>Your email has been verified. You can now access your dashboard.</p>
          <a href="/dashboard" class="professional-button">
            <i class="fas fa-tachometer-alt"></i>
            Go to Dashboard
          </a>
        </div>
        
        <div id="error-state" class="verification-state hidden">
          <i class="fas fa-exclamation-triangle error-icon"></i>
          <h2>Verification Failed</h2>
          <p id="error-message">There was an issue verifying your email address.</p>
          <div class="verification-actions">
            <button id="resend-btn" class="professional-button secondary">
              <i class="fas fa-redo"></i>
              Resend Verification Email
            </button>
            <a href="/" class="professional-button">
              <i class="fas fa-home"></i>
              Return Home
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <style>
    .verification-container {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 2rem;
    }

    .verification-card {
      max-width: 500px;
      width: 100%;
      padding: 3rem;
      text-align: center;
    }

    .verification-header {
      margin-bottom: 2rem;
    }

    .verification-header i {
      font-size: 3rem;
      color: var(--accent-cyan);
      margin-bottom: 1rem;
    }

    .verification-header h1 {
      color: var(--white);
      margin: 0;
      font-size: 2rem;
      font-weight: 600;
    }

    .verification-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1.5rem;
    }

    .verification-state.hidden {
      display: none;
    }

    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(255, 255, 255, 0.1);
      border-top: 3px solid var(--accent-cyan);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .success-icon {
      font-size: 4rem;
      color: var(--success-green);
    }

    .error-icon {
      font-size: 4rem;
      color: #ef4444;
    }

    .verification-state h2 {
      color: var(--white);
      margin: 0;
      font-size: 1.5rem;
    }

    .verification-state p {
      color: rgba(255, 255, 255, 0.8);
      margin: 0;
      line-height: 1.6;
    }

    .verification-actions {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      width: 100%;
    }

    @media (min-width: 480px) {
      .verification-actions {
        flex-direction: row;
        justify-content: center;
      }
    }

    .professional-button.secondary {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .professional-button.secondary:hover {
      background: rgba(255, 255, 255, 0.2);
      border-color: rgba(255, 255, 255, 0.3);
    }
  </style>

  <script>
    import { AuthService } from '../lib/supabase.ts';

    // Get URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const accessToken = urlParams.get('access_token');
    const refreshToken = urlParams.get('refresh_token');
    const error = urlParams.get('error');
    const errorDescription = urlParams.get('error_description');

    const verifyingState = document.getElementById('verifying-state');
    const successState = document.getElementById('success-state');
    const errorState = document.getElementById('error-state');
    const errorMessage = document.getElementById('error-message');
    const resendBtn = document.getElementById('resend-btn');

    async function handleVerification() {
      if (error) {
        showError(errorDescription || 'Email verification failed');
        return;
      }

      if (accessToken && refreshToken) {
        try {
          // Set the session with the tokens
          const { error: sessionError } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken,
          });

          if (sessionError) {
            throw sessionError;
          }

          showSuccess();
        } catch (err) {
          showError(err.message || 'Failed to verify email');
        }
      } else {
        showError('Invalid verification link');
      }
    }

    function showSuccess() {
      verifyingState?.classList.add('hidden');
      errorState?.classList.add('hidden');
      successState?.classList.remove('hidden');
      
      // Dispatch event to update navigation
      window.dispatchEvent(new CustomEvent('authStateChanged'));
    }

    function showError(message) {
      verifyingState?.classList.add('hidden');
      successState?.classList.add('hidden');
      errorState?.classList.remove('hidden');
      
      if (errorMessage) {
        errorMessage.textContent = message;
      }
    }

    // Resend verification email
    resendBtn?.addEventListener('click', async () => {
      const email = prompt('Please enter your email address:');
      if (email) {
        try {
          resendBtn.disabled = true;
          resendBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
          
          const { error } = await AuthService.resendVerificationEmail(email);
          
          if (error) {
            throw error;
          }
          
          alert('Verification email sent! Please check your inbox.');
        } catch (err) {
          alert(`Failed to send verification email: ${err.message}`);
        } finally {
          resendBtn.disabled = false;
          resendBtn.innerHTML = '<i class="fas fa-redo"></i> Resend Verification Email';
        }
      }
    });

    // Start verification process
    document.addEventListener('DOMContentLoaded', () => {
      handleVerification();
    });
  </script>
</Layout>